#!/usr/bin/env node

var program = require('commander');
var exec = require('child_process').exec;
var fs = require('fs');
var std = require('./std');

var pkg = require('./package');

var version = pkg.version;

program
  .version(version)
  .usage('<command or repo>')
  .parse(process.argv);

var gclone = (function() {
  var module = {};

  module.help = help;
  module.clone = clone;
  module.list = list;
  module.set = set;
  module.remove = remove;
  
  /**
   * clone - Clones a repo to a directory.
   * @repo: The (possibly remote) repository to clone from. Could also be a variable referencing a repo.
   * @dir: The name of a new directory to clone into. 
   *       The repo name is used if no directory is explicitly given.
   *       Cloning into an existing directory is only allowed if the directory is empty.
   *
   * Examples: 
   *    clone('creaturephil/gclone', '');
   *    clone('creaturephil/gclone', 'gclone-master');
   *    clone(express, 'express'); // express variable references to strongloop/express
   */
  function clone(repo, dir) {
    var parts = repo.split('/');
    var cmd = 'git clone https://github.com/' + parts[0] + '/' + parts[1] + '.git'; 
    if (!dir) {
      console.log('Cloning into \'' + parts[1] + '\'...');
      exec(cmd, function(err, stdout, stderr) {
        if (err) throw err;
        console.log('done');
      });
    } else { 
      console.log('Cloning into \'' + dir + '\'...');
      exec(cmd + ' ' + dir, function(err, stdout, stderr) {
        if (err) throw err;
        console.log('done');
      });
    }
  }

  /**
   * list - List all variables set.
   */
  function list() {
    var file = __dirname + '/.gclone';
    var list = [];
    fs.readFile(file, 'utf8', function(err, data) {
      if (err) throw err;
      var lines = data.split('\n');
      var len = lines.length;
      while(len--) {
        if (!lines[len]) continue;
        list.push(lines[len].split(',').join(' - '));
      }
      console.log(list.reverse().join('\n'));
    });
  }

  /**
   * set - Sets a variable to a repo.
   * @arg: An array that contains the variable name at index 0 and the repo at index 1.
   *
   * Examples: 
   *    set(['markus', 'creaturephil/markus']);
   *    set(['express', 'strongloop/express']);
   */
  function set(arg) {
    var name = arg.shift();
    var url = arg.shift();
    std.out(name, url, false, function() {
      console.log('\n' + name + ' is set to ' + url);
    });
  }

  /**
   * remove - Remove a variable set.
   * @arg: An array that contains the variable name at index 0.
   *
   * Examples: 
   *    remove(['markus']);
   *    remove(['express']);
   */
  function remove(arg) {
    var name = arg.shift();
    std.out(name, '', true, function() {
      console.log('\n' + name + ' is remove.');
    });
  }

  return module;
})();

function run() {
  if (!program.args.length) return help();

  var arg = program.args.shift();

  if (arg.indexOf('/') >= 0) {
    return gclone['clone'](arg, program.args.shift());
  }

  if (gclone[arg]) {
    return gclone[arg](program.args);
  }

  std.in(arg, function(data) {
    if (!data) return help();
    gclone['clone'](data, program.args.shift());
  });
}

function help() {
  exec('gclone -h', function(err, stdout, stderr) {
    if (err) throw err;
    console.log(stdout);
    console.log(stderr);
  });
}

run();
